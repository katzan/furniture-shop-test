// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.katzan.spring.furnituretest.model;

import com.katzan.spring.furnituretest.model.Big;
import com.katzan.spring.furnituretest.model.BigDataOnDemand;
import com.katzan.spring.furnituretest.repository.BigRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BigDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BigDataOnDemand: @Component;
    
    private Random BigDataOnDemand.rnd = new SecureRandom();
    
    private List<Big> BigDataOnDemand.data;
    
    @Autowired
    BigRepository BigDataOnDemand.bigRepository;
    
    public Big BigDataOnDemand.getNewTransientBig(int index) {
        Big obj = new Big();
        setContent(obj, index);
        setFileName(obj, index);
        setName(obj, index);
        setSize(obj, index);
        return obj;
    }
    
    public void BigDataOnDemand.setContent(Big obj, int index) {
        String content = "content_" + index;
        if (content.length() > 10240) {
            content = content.substring(0, 10240);
        }
        obj.setContent(content);
    }
    
    public void BigDataOnDemand.setFileName(Big obj, int index) {
        String fileName = "fileName_" + index;
        obj.setFileName(fileName);
    }
    
    public void BigDataOnDemand.setName(Big obj, int index) {
        String name = "name_" + index;
        if (name.length() > 20) {
            name = name.substring(0, 20);
        }
        obj.setName(name);
    }
    
    public void BigDataOnDemand.setSize(Big obj, int index) {
        Long size = new Integer(index).longValue();
        obj.setSize(size);
    }
    
    public Big BigDataOnDemand.getSpecificBig(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Big obj = data.get(index);
        Long id = obj.getId();
        return bigRepository.findOne(id);
    }
    
    public Big BigDataOnDemand.getRandomBig() {
        init();
        Big obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return bigRepository.findOne(id);
    }
    
    public boolean BigDataOnDemand.modifyBig(Big obj) {
        return false;
    }
    
    public void BigDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = bigRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Big' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Big>();
        for (int i = 0; i < 10; i++) {
            Big obj = getNewTransientBig(i);
            try {
                bigRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            bigRepository.flush();
            data.add(obj);
        }
    }
    
}
