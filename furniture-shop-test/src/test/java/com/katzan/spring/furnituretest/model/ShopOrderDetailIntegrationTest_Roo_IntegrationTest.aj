// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.katzan.spring.furnituretest.model;

import com.katzan.spring.furnituretest.model.ShopOrderDetailDataOnDemand;
import com.katzan.spring.furnituretest.model.ShopOrderDetailIntegrationTest;
import com.katzan.spring.furnituretest.repository.ShopOrderDetailRepository;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ShopOrderDetailIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ShopOrderDetailIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ShopOrderDetailIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ShopOrderDetailIntegrationTest: @Transactional;
    
    @Autowired
    ShopOrderDetailDataOnDemand ShopOrderDetailIntegrationTest.dod;
    
    @Autowired
    ShopOrderDetailRepository ShopOrderDetailIntegrationTest.shopOrderDetailRepository;
    
    @Test
    public void ShopOrderDetailIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", dod.getRandomShopOrderDetail());
        long count = shopOrderDetailRepository.count();
        Assert.assertTrue("Counter for 'ShopOrderDetail' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testFind() {
        ShopOrderDetail obj = dod.getRandomShopOrderDetail();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to provide an identifier", id);
        obj = shopOrderDetailRepository.findOne(id);
        Assert.assertNotNull("Find method for 'ShopOrderDetail' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'ShopOrderDetail' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", dod.getRandomShopOrderDetail());
        long count = shopOrderDetailRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'ShopOrderDetail', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<ShopOrderDetail> result = shopOrderDetailRepository.findAll();
        Assert.assertNotNull("Find all method for 'ShopOrderDetail' illegally returned null", result);
        Assert.assertTrue("Find all method for 'ShopOrderDetail' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", dod.getRandomShopOrderDetail());
        long count = shopOrderDetailRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<ShopOrderDetail> result = shopOrderDetailRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'ShopOrderDetail' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'ShopOrderDetail' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testFlush() {
        ShopOrderDetail obj = dod.getRandomShopOrderDetail();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to provide an identifier", id);
        obj = shopOrderDetailRepository.findOne(id);
        Assert.assertNotNull("Find method for 'ShopOrderDetail' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyShopOrderDetail(obj);
        Integer currentVersion = obj.getVersion();
        shopOrderDetailRepository.flush();
        Assert.assertTrue("Version for 'ShopOrderDetail' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testSaveUpdate() {
        ShopOrderDetail obj = dod.getRandomShopOrderDetail();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to provide an identifier", id);
        obj = shopOrderDetailRepository.findOne(id);
        boolean modified =  dod.modifyShopOrderDetail(obj);
        Integer currentVersion = obj.getVersion();
        ShopOrderDetail merged = shopOrderDetailRepository.save(obj);
        shopOrderDetailRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'ShopOrderDetail' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", dod.getRandomShopOrderDetail());
        ShopOrderDetail obj = dod.getNewTransientShopOrderDetail(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'ShopOrderDetail' identifier to be null", obj.getId());
        shopOrderDetailRepository.save(obj);
        shopOrderDetailRepository.flush();
        Assert.assertNotNull("Expected 'ShopOrderDetail' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ShopOrderDetailIntegrationTest.testDelete() {
        ShopOrderDetail obj = dod.getRandomShopOrderDetail();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ShopOrderDetail' failed to provide an identifier", id);
        obj = shopOrderDetailRepository.findOne(id);
        shopOrderDetailRepository.delete(obj);
        shopOrderDetailRepository.flush();
        Assert.assertNull("Failed to remove 'ShopOrderDetail' with identifier '" + id + "'", shopOrderDetailRepository.findOne(id));
    }
    
}
